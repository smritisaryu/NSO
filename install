#!/bin/bash

openrc=$1
tag=$2
key=$3
privkey=${key%.pub}
sshconfig="config"
hostsfile="hosts"
echo "$(date) Intialising install"
#sudo apt-get update 2>/dev/null
#echo "$(date) updated"
source "$openrc"
#sudo apt-get install jq -y 2>/dev/null
#echo "$(date) installed requirements"

echo "$(date) Check if network exists"
network="${tag}_network"
# Check if network exists
checknetwork_id=$(openstack network show "$network" -f value -c id 2>/dev/null)

if [ -n "$checknetwork_id" ]; then
    echo "$(date) Network exists with ID: $checknetwork_id"
else
    echo "$(date) Network does not exist"
    #create
    net_create=$(openstack network create "$network" --tag "$TAG" 2>/dev/null)
    echo "$(date) Network created"
fi
checknetwork_id=$(openstack network show "$network" -f value -c id 2>/dev/null)

echo "$(date) Check if subnet exists"
subnet="${tag}_subnet"
# Check if network exists
check_subnet_id=$(openstack subnet show "$subnet" -f value -c id 2>/dev/null)

if [ -n "$check_subnet_id" ]; then
    echo "$(date) subnet exists with ID: $check_subnet_id"
else
    echo "$(date) subnet does not exist"
    #create sub
  #  openstack subnet create --network "$network" --dhcp --ip-version 4 --subnet-range 10.10.0.0/24 --allocation-pool start= 10.10.0.2, end=10.10.0.30 "$subnet"

    sub_create=$(openstack subnet create --network "$network" --dhcp --ip-version 4 --subnet-range 10.0.1.0/24 --allocation-pool start=10.0.1.2,end=10.0.1.254 "$subnet" 2>/dev/null)
    echo "$(date) subnet created"
fi

echo "$(date) Check if router exists"
router="${tag}_router"
# Check if router exists
router_id=$(openstack router show "$router" -f value -c id 2>/dev/null)

if [ -n "$router_id" ]; then
    echo "$(date) Router exists with ID: $router_id"
else
    echo "$(date) Router does not exist"
    create_router=$(openstack router create --tag "$tag" "$router" )
    #router_create=$(openstack router create --external-gateway ext-net "$router" 2>/dev/null)
    echo "$(date) $router created"
    setway=$(openstack router set --external-gateway ext-net "$router")

    #router_create=$(openstack router create --external-gateway ext-net "$router" 2>/dev/null)
    echo "$(date) external gateway set to the router"
fi

echo "$(date) checking if router is added to the router"
#add router to subnet
router_interfaces=$(openstack router show "$router" -f json 2>/dev/null)
#interface is connected here
if echo "$router_interfaces" | jq -r '.interfaces_info[].subnet_id' | grep -q "$check_subnet_id"; then
    echo "$(date) Subnet is already added to the router"
else
    echo "$(date) Subnet is not added to the router"
    router_add=$(openstack router add subnet $router $subnet)
    echo "$(date) subnet added to the router"
fi

echo "$(date) Check if security group exists"
secgrp="${tag}_securitygroup"
secgrp_id=$(openstack security group show "$secgrp" -f value -c id 2>/dev/null)
if [ -n "$secgrp_id" ]; then
    echo "$(date) security group exists with ID: $secgrp_id"
else
    echo "$(date) security group does not exist"
    sec_group=$(openstack security group create "$secgrp" --tag "$tag" 2>/dev/null)
    r1=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress $secgrp 2>/dev/null)
    r2=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --egress $secgrp 2>/dev/null)
    r3=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress $secgrp 2>/dev/null)
    r4=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress $secgrp 2>/dev/null)
    r5=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress $secgrp 2>/dev/null)
    r6=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress $secgrp 2>/dev/null)
    r7=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9090 --protocol tcp --ingress $secgrp 2>/dev/null)
    r8=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9100 --protocol tcp --ingress $secgrp 2>/dev/null)
    r9=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 3000 --protocol tcp --ingress $secgrp 2>/dev/null)
    r10=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress $secgrp 2>/dev/null)
    echo "$(date) security group created"

fi

echo "$(date) Check if keypair exists"
keypair="${tag}_keypair"
existing_keypairs=$(openstack keypair list -f json)
#create keypair
if echo "$existing_keypairs" | jq -r '.[].Name' | grep -q "$keypair"; then
    echo "$(date) Keypair already exists"
else
    keypair_create=$(openstack keypair create --public-key "$key" "$keypair" 2>/dev/null)
    echo "$(date) Keypair created"
fi


echo "$(date) Check if HAproxy1 exists"
HAproxy1="${tag}_HAproxy1"
check_ha1=$(openstack server show "$HAproxy1" -f value -c id 2>/dev/null)

if [ -n "$check_ha1" ]; then
    echo "----- $(date) HAproxy1 server exists with ID: $check_ha1 -----"
else
    echo "----- $(date) HAproxy1 does not exist -----"
    # Create
    ha1_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" --flavor "1C-2GB-50GB" --key-name "$keypair" --security-group "$secgrp" --network "$network" "$HAproxy1" 2>/dev/null)
    echo "-----$(date) Master HAproxy created -----"
fi

echo "$(date) Check if HAproxy2 exists"
HAproxy2="${tag}_HAproxy2"
check_ha2=$(openstack server show "$HAproxy2" -f value -c id 2>/dev/null)

if [ -n "$check_ha2" ]; then
    echo "----- $(date) HAproxy2 server exists with ID: $check_ha2 -----"
else
    echo "----- $(date) HAproxy2 does not exist -----"
    # Create
    ha2_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" --flavor "1C-2GB-50GB" --key-name "$keypair" --security-group "$secgrp" --network "$network" "$HAproxy2" 2>/dev/null)
    echo "-----$(date) Backup HAproxy created -----"
fi

echo "$(date) Check if Bastion exists"
Bastion="${tag}_bastion"
check_bastion=$(openstack server show "$Bastion" -f value -c id 2>/dev/null)

if [ -n "$check_bastion" ]; then
    echo "----- $(date) Bastion server exists with ID: $check_ha1 -----"
else
    echo "----- $(date) Bastion does not exist -----"
    # Create
    bastion=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" --flavor "1C-2GB-50GB" --key-name "$keypair" --security-group "$secgrp" --network "$network" "$Bastion" 2>/dev/null)
    echo "----- $(date) Bastion created -----"
fi

#############################################################
echo "$(date) creating nodes"
# Define the number of nodes to create
N=3

# Define the base name for the nodes
BASE_NAME="dev"

# Loop through the number of nodes
for ((i=1; i<=N; i++)); do
    # Define the dev name and tag
    NODE_NAME="${tag}_${BASE_NAME}${i}"
    NODE_TAG="${tag}"

    # Check if the dev already exists
    if openstack server show "$NODE_NAME" >/dev/null 2>&1; then
        echo "$(date) Node $NODE_NAME already exists."
    else
        echo "$(date) Creating node $NODE_NAME with tag $NODE_TAG..."
        # Add your command to create the dev here
        nodes_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" --flavor "1C-2GB-50GB" --key-name "$keypair" --security-group "$secgrp" --network "$network" "$NODE_NAME" 2>/dev/null)
    fi
done

##############################################################
echo "$(date) checking for unassigned floating ips"
floating_unassigned=$(openstack floating ip list -c 'Floating IP Address' -f value)
openstack floating ip list -c 'Floating IP Address' -f value > unassigned
line_count=$(wc -l < unassigned)
if (( "$line_count" == 0 )); then
    echo "$(date) No floating IPs are present"
    echo "$(date) Creating 2 floating IPs"
    f_ip3=$(openstack floating ip create ext-net -f value -c floating_ip_address > f1 2>/dev/null)
    f_ip4=$(openstack floating ip create ext-net -f value -c floating_ip_address > f2 2>/dev/null)
    floating_ip3=$(cat f1)
    floatip4=$(cat f2)
elif (( "$line_count" == 1 )); then
    echo "$(date) Only 1 floating IP is present"
    echo "$(date) Creating another floating IP"
    index=1
    while read -r ip; do
        echo "$ip" > "f$index"
        echo "$(date) Floating IP $index: $ip saved to f$index"
        index=$((index + 1))
    done <<< "$floating_unassigned"
    f_ip4=$(openstack floating ip create ext-net -f value -c floating_ip_address > f2 2>/dev/null)
    floating_ip3=$(cat f1)
    floatip4=$(cat f2)
else
    echo "$(date) Floating IPs are available"
    index=1
    while read -r ip; do
        # Save each IP address into a separate file
        echo "$ip" > "f$index"
        echo "$(date) Floating IP $index: $ip saved to f$index"
        index=$((index + 1))
    done <<< "$floating_unassigned"
    floating_ip3=$(cat f1)
    floatip4=$(cat f2)
fi
# Wait for servers to become active
echo "$(date) Waiting for servers to become active"
while true; do
    HAproxy1_status=$(openstack server show "$HAproxy1" -f value -c status 2>/dev/null)
    HAproxy2_status=$(openstack server show "$HAproxy2" -f value -c status 2>/dev/null)
    Bastion_status=$(openstack server show "$Bastion" -f value -c status 2>/dev/null)
    # Check if all servers are active
    if [ "$HAproxy1_status" = "ACTIVE" ] && [ "$HAproxy2_status" = "ACTIVE" ] && [ "$Bastion_status" = "ACTIVE" ]; then
        break
    fi
    sleep 10
done

#floating_ip3=$(openstack floating ip create ext-net -f value -c floating_ip_address 2>/dev/null)
#openstack server add floating ip "$HAproxy1" "$floating_ip1"
#openstack server add floating ip "$HAproxy2" "$floating_ip2"
openstack server add floating ip "$Bastion" "$floating_ip3" 2>/dev/null
bastionfip=$(openstack server list --name $Bastion -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2' 2>/dev/null)
echo "$(date) Floating IPs assigned successfully: $bastionfip to $Bastion"

#################################################################################################################################
echo "$(date) Creating port"
#vip_port="${tag}_vip"
#vip=$(openstack port create --network "$network" --fixed-ip subnet="$subnet" --no-security-group "$vip_port" 2>/dev/null)
vip_port="${tag}_vip"

# Check if the port already exists
if openstack port show "$vip_port" &>/dev/null; then
    echo "$(date) Port $vip_port already exists."
else
    # If port doesn't exist, create it
    vip=$(openstack port create --network "$network" --fixed-ip subnet="$subnet" --no-security-group "$vip_port" 2>/dev/null)
    echo "$(date) Created port $vip_port."
fi
#floatip4=$(openstack floating ip create ext-net -f value -c floating_ip_address 2>/dev/null)
echo "$(date) Attatching floating ip to vip port"
add_vip_fip=$(openstack floating ip set --port "$vip_port" $floatip4 2>/dev/null)

if [ -f "vip" ]; then
    rm "vip"
fi

vip_addr=$(openstack port show "$vip_port" -f value -c fixed_ips | grep -Po '\d+\.\d+\.\d+\.\d+' 2>/dev/null)
echo "$vip_addr" >> vip

echo "$(date) updating port...."
update_port=$(openstack port set --allowed-address ip-address="$floatip4" "$vip_port" 2>/dev/null)


bastionfip=$(openstack server list --name $Bastion -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2' 2>/dev/null)
haproxyfixed=$(openstack server show $HAproxy1 -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1' 2>/dev/null)
haproxyfixed2=$(openstack server list --name $HAproxy2 -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1' 2>/dev/null)

echo "$(date) updating ports of haproxy servers"
portid_ha1=$(openstack port list --fixed-ip ip-address="$haproxyfixed" -c ID -f value 2>/dev/null)
portid_ha2=$(openstack port list --fixed-ip ip-address="$haproxyfixed2" -c ID -f value 2>/dev/null)

update_port1=$(openstack port set --allowed-address ip-address="$vip_addr" "$portid_ha1" 2>/dev/null)
update_port2=$(openstack port set --allowed-address ip-address="$vip_addr" "$portid_ha2" 2>/dev/null)


echo "$(date) creating ssh config and hosts file"
# Remove hosts file if it exists
if [ -f "$hostsfile" ]; then
    rm "$hostsfile"
fi

# Remove sshconfig file if it exists
if [ -f "$sshconfig" ]; then
    rm "$sshconfig"
fi
echo "$(date) updating ssh config file"
echo " " >> $sshconfig
echo "Host $Bastion" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $bastionfip" >> $sshconfig
echo "   IdentityFile $privkey" >> $sshconfig
echo "   UserKnownHostsFile /dev/null" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no" >> $sshconfig

echo " " >> $sshconfig
echo "Host $HAproxy1" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $haproxyfixed" >> $sshconfig
echo "   IdentityFile $privkey" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no ">> $sshconfig
echo "   ProxyJump $Bastion" >> $sshconfig

echo " " >> $sshconfig
echo "Host $HAproxy2" >> $sshconfig
echo "   User ubuntu" >> $sshconfig
echo "   HostName $haproxyfixed2" >> $sshconfig
echo "   IdentityFile $privkey" >> $sshconfig
echo "   StrictHostKeyChecking no" >> $sshconfig
echo "   PasswordAuthentication no ">> $sshconfig
echo "   ProxyJump $Bastion" >> $sshconfig

echo "$(date) generate hosts file"
echo "[bastion]" >> $hostsfile
echo "$Bastion" >> $hostsfile
echo " " >> $hostsfile
echo "[HAproxy]" >> $hostsfile
echo "$HAproxy1" >> $hostsfile
echo "$HAproxy2" >> $hostsfile

echo " " >> $hostsfile
echo "[webservers]" >> $hostsfile
sleep 10
echo "$(date) waiting for active dev servers..."
sleep 10
# Get the list of active servers
active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag}"_'dev([1-9]+)')
#   echo "$active_servers"
# Loop through each active server and extract its IP address
for server in $active_servers; do
        ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po  '\d+\.\d+\.\d+\.\d+')
        echo " " >> $sshconfig
        echo "Host $server" >> $sshconfig
        echo "   User ubuntu" >> $sshconfig
        echo "   HostName $ip_address" >> $sshconfig
        echo "   IdentityFile $privkey" >> $sshconfig
        echo "   UserKnownHostsFile=/dev/null" >> $sshconfig
        echo "   StrictHostKeyChecking no" >> $sshconfig
        echo "   PasswordAuthentication no" >> $sshconfig
        echo "   ProxyJump $Bastion" >> $sshconfig

        echo "$server" >> $hostsfile
done

echo " " >> $hostsfile
echo "[HAproxy1]" >> $hostsfile
echo "$HAproxy1" >> $hostsfile
echo " " >> $hostsfile
echo "[HAproxy2]" >> $hostsfile
echo "$HAproxy2" >> $hostsfile

echo " " >> $hostsfile
echo "[all:vars]" >> $hostsfile
echo "ansible_user=ubuntu" >> $hostsfile
echo "ansible_ssh_private_key_file=$privkey" >> $hostsfile
echo "ansible_ssh_common_args=' -F $sshconfig '" >> $hostsfile
echo "$(date) SSH config file and hosts file generated"
#cp -r config "~/.ssh/config"
#original_dir=$(pwd)
#cd /opt
#sudo wget https://github.com/prometheus/prometheus/releases/download/v2.26.0/prometheus-2.26.0.linux-amd64.tar.gz
#sudo tar -xvf prometheus-2.26.0.linux-amd64.tar.gz
#sudo wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz
#sudo tar -xvf node_exporter-1.3.1.linux-amd64.tar.gz
#cd $original_dir
if [ -f "dev_count.txt" ]; then
    rm "dev_count.txt"
fi
nodes="${tag}_dev"
no_of_nodes=$(openstack server list | grep "$nodes" | wc -l > dev_count.txt)
sleep 5
echo "$(date) Initiating ansible playbook.."
sleep 5
echo "$(date) Running ansible playbook..."
ansible-playbook -i "$hostsfile" site.yml
#echo "$(date) Setting up monitor server/bastion"
#ansible-playbook -i "$hostsfile" site2.yml
echo " bastion ip address:  "$bastionfip" "
echo " virtual ip address: "$floatip4" "
